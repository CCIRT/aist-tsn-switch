# ------------------------------------------------------------------------------
# Referenced: https://www.fpgadeveloper.com/driving-ethernet-ports-without-a-processor/index.html#modifying-the-design-for-the-ethernet-fmc
# ------------------------------------------------------------------------------
2c2
< // File       : tri_mode_ethernet_mac_0_example_design.v
---
> // File       : tri_mode_ethernet_mac_0_example_design_mod.v
133c133
< module tri_mode_ethernet_mac_0_example_design
---
> module tri_mode_ethernet_mac_0_example_design_mod
139,140c139,149
<       input         clk_in_p,
<       input         clk_in_n,
---
>       // input         clk_in_p,
>       // input         clk_in_n,
> 
>       // Input clocks from design clocks
>       input         gtx_clk_bufg,
>       // input         refclk_bufg,
>       input         s_axi_aclk,
> 
>       // locked signal from design clocks
>       input         dcm_locked,
> 
145a155,157
>       // Pause interface DESerialisation
>       output reg                  pause_req,
>       output reg   [15:0]         pause_val,
147,148d158
<       // GMII Interface
<       //---------------
150,158c160,167
<       output [7:0]  gmii_txd,
<       output        gmii_tx_en,
<       output        gmii_tx_er,
<       output        gmii_tx_clk,
<       input  [7:0]  gmii_rxd,
<       input         gmii_rx_dv,
<       input         gmii_rx_er,
<       input         gmii_rx_clk,
<       input         mii_tx_clk,
---
>       // RGMII Interface
>       //----------------
>       // output [3:0]  rgmii_txd,
>       // output        rgmii_tx_ctl,
>       // output        rgmii_txc,
>       // input  [3:0]  rgmii_rxd,
>       // input         rgmii_rx_ctl,
>       // input         rgmii_rxc,
163,164c172,173
<       inout         mdio,
<       output        mdc,
---
>       // inout         mdio,
>       // output        mdc,
189c198,262
<       output        activity_flashn
---
>       output        activity_flashn,
> 
>       // Tri mode ethernet MAC connections
>       //------------------------------------
> 
>       // asynchronous reset
>       output         glbl_rstn,
>       output         rx_axi_rstn,
>       output         tx_axi_rstn,
> 
>       // Reference clock for IDELAYCTRL's
>       // output         refclk,
> 
>       // Receiver Statistics Interface
>       //---------------------------------------
>       input        rx_axis_mac_aclk,
>       input        rx_reset,
>       input [27:0] rx_statistics_vector,
>       input        rx_statistics_valid,
> 
>       // rx mac AXI-Stream interface
>       input    [7:0]    rx_axis_mac_tdata,
>       input             rx_axis_mac_tvalid,
>       input             rx_axis_mac_tlast,
>       input             rx_axis_mac_tuser,
> 
>       // Transmitter Statistics Interface
>       //------------------------------------------
>       input        tx_axis_mac_aclk,
>       input        tx_reset,
>       output  [7:0]  tx_ifg_delay,
>       input [31:0] tx_statistics_vector,
>       input        tx_statistics_valid,
> 
>       // tx mac AXI-Stream interface
>       output   [7:0]    tx_axis_mac_tdata,
>       output            tx_axis_mac_tvalid,
>       output            tx_axis_mac_tlast,
>       input             tx_axis_mac_tready,
>       output            tx_axis_mac_tuser,
> 
>       // AXI-Lite Interface
>       //---------------
>       output         s_axi_resetn,
> 
>       output  [11:0] s_axi_awaddr,
>       output         s_axi_awvalid,
>       input        s_axi_awready,
> 
>       output  [31:0] s_axi_wdata,
>       output         s_axi_wvalid,
>       input        s_axi_wready,
> 
>       input [1:0]  s_axi_bresp,
>       input        s_axi_bvalid,
>       output         s_axi_bready,
> 
>       output  [11:0] s_axi_araddr,
>       output         s_axi_arvalid,
>       input        s_axi_arready,
> 
>       input [31:0] s_axi_rdata,
>       input [1:0]  s_axi_rresp,
>       input        s_axi_rvalid,
>       output         s_axi_rready
216,221c289,294
<    wire                 gtx_clk_bufg;
<    
<    wire                 refclk_bufg;
<    wire                 s_axi_aclk;
<    wire                 rx_mac_aclk;
<    wire                 tx_mac_aclk;
---
>    // wire                 gtx_clk_bufg;
>    //
>    // wire                 refclk_bufg;
>    // wire                 s_axi_aclk;
>    // wire                 rx_mac_aclk;
>    // wire                 tx_mac_aclk;
223c296
<    wire                 s_axi_resetn;
---
>    // wire                 s_axi_resetn;
228,229c301,302
<    wire                 rx_reset;
<    wire                 tx_reset;
---
>    // wire                 rx_reset;
>    // wire                 tx_reset;
231,232c304,305
<    wire                 dcm_locked;
<    wire                 glbl_rst_intn;
---
>    // wire                 dcm_locked;
>    // wire                 glbl_rst_intn;
256c329
<    wire                 rx_statistics_valid;
---
>    // wire                 rx_statistics_valid;
258c331
<    wire  [27:0]         rx_statistics_vector;
---
>    // wire  [27:0]         rx_statistics_vector;
260c333
<    (* ASYNC_REG = "TRUE" *) reg   [29:0]         rx_stats_shift;
---
>    reg   [29:0]         rx_stats_shift;
266c339
<    wire                 tx_statistics_valid;
---
>    // wire                 tx_statistics_valid;
268c341
<    wire  [31:0]         tx_statistics_vector;
---
>    // wire  [31:0]         tx_statistics_vector;
273a347,349
>    wire                 inband_link_status;
>    wire  [1:0]          inband_clock_speed;
>    wire                 inband_duplex_status;
277,278c353,354
<    reg                  pause_req;
<    reg   [15:0]         pause_val;
---
>    // reg                  pause_req;
>    // reg   [15:0]         pause_val;
280,296c356,372
<    // AXI-Lite interface
<    wire  [11:0]         s_axi_awaddr;
<    wire                 s_axi_awvalid;
<    wire                 s_axi_awready;
<    wire  [31:0]         s_axi_wdata;
<    wire                 s_axi_wvalid;
<    wire                 s_axi_wready;
<    wire  [1:0]          s_axi_bresp;
<    wire                 s_axi_bvalid;
<    wire                 s_axi_bready;
<    wire  [11:0]         s_axi_araddr;
<    wire                 s_axi_arvalid;
<    wire                 s_axi_arready;
<    wire  [31:0]         s_axi_rdata;
<    wire  [1:0]          s_axi_rresp;
<    wire                 s_axi_rvalid;
<    wire                 s_axi_rready;
---
>    // // AXI-Lite interface
>    // wire  [11:0]         s_axi_awaddr;
>    // wire                 s_axi_awvalid;
>    // wire                 s_axi_awready;
>    // wire  [31:0]         s_axi_wdata;
>    // wire                 s_axi_wvalid;
>    // wire                 s_axi_wready;
>    // wire  [1:0]          s_axi_bresp;
>    // wire                 s_axi_bvalid;
>    // wire                 s_axi_bready;
>    // wire  [11:0]         s_axi_araddr;
>    // wire                 s_axi_arvalid;
>    // wire                 s_axi_arready;
>    // wire  [31:0]         s_axi_rdata;
>    // wire  [1:0]          s_axi_rresp;
>    // wire                 s_axi_rvalid;
>    // wire                 s_axi_rready;
306a383,386
>    // MAC reset ports
>    assign rx_axi_rstn = 1'b1;
>    assign tx_axi_rstn = 1'b1;
> 
394c474
<    wire  [7:0]          tx_ifg_delay = 0;    // not used in this example
---
>    assign         tx_ifg_delay = 0;    // not used in this example
425,439c505,519
<   tri_mode_ethernet_mac_0_example_design_clocks example_clocks
<    (
<       // differential clock inputs
<       .clk_in_p         (clk_in_p),
<       .clk_in_n         (clk_in_n),
< 
<       // asynchronous control/resets
<       .glbl_rst         (glbl_rst),
<       .dcm_locked       (dcm_locked),
< 
<       // clock outputs
<       .gtx_clk_bufg     (gtx_clk_bufg),
<       .refclk_bufg      (refclk_bufg),
<       .s_axi_aclk       (s_axi_aclk)
<    );
---
>   // tri_mode_ethernet_mac_0_example_design_clocks example_clocks
>   //  (
>   //     // differential clock inputs
>   //     .clk_in_p         (clk_in_p),
>   //     .clk_in_n         (clk_in_n),
>   //
>   //     // asynchronous control/resets
>   //     .glbl_rst         (glbl_rst),
>   //     .dcm_locked       (dcm_locked),
>   //
>   //     // clock outputs
>   //     .gtx_clk_bufg     (gtx_clk_bufg),
>   //     .refclk_bufg      (refclk_bufg),
>   //     .s_axi_aclk       (s_axi_aclk)
>   //  );
473c553,554
<       .glbl_rst_intn    (glbl_rst_intn),
---
>       .glbl_rst_intn    (glbl_rstn),
>       // .glbl_rst_intn    (glbl_rst_intn),
499c580
<   always @(posedge rx_mac_aclk)
---
>   always @(posedge rx_axis_mac_aclk)
536c617
<   always @(posedge tx_mac_aclk)
---
>   always @(posedge tx_axis_mac_aclk)
576a658
>   reg                 pause_req_s_sync_gtx_clk_bak;
578a661
>      pause_req_s_sync_gtx_clk_bak = pause_req_s_sync_gtx_clk;
584c667
<      if (pause_shift[18] == 1'b0 & pause_shift[17] == 1'b1 & pause_shift[0] == 1'b1) begin
---
>      if (pause_req_s_sync_gtx_clk && !pause_req_s_sync_gtx_clk_bak) begin  // FIFO almost_full is asserted
586c669,673
<         pause_val <= pause_shift[16:1];
---
>         pause_val <= 16'd375; // 192000 ns => 3000 Byte @ 1GbE
>      end
>      else if (!pause_req_s_sync_gtx_clk && pause_req_s_sync_gtx_clk_bak) begin  // FIFO almost_full is deasserted
>         pause_req <= 1'b1;
>         pause_val <= 16'd0;
594d680
< 
599c685
<    tri_mode_ethernet_mac_0_axi_lite_sm axi_lite_controller (
---
>    tri_mode_ethernet_mac_0_axi_lite_sm_mod axi_lite_controller (
635c721
<   tri_mode_ethernet_mac_0_fifo_block trimac_fifo_block (
---
>   tri_mode_ethernet_mac_0_fifo_block_mod trimac_fifo_block (
640,643c726,728
<       .glbl_rstn                    (glbl_rst_intn),
<       .rx_axi_rstn                  (1'b1),
<       .tx_axi_rstn                  (1'b1),
< 
---
>       // .glbl_rstn                    (glbl_rst_intn),
>       // .rx_axi_rstn                  (1'b1),
>       // .tx_axi_rstn                  (1'b1),
646c731
<       .refclk                       (refclk_bufg),
---
>       // .refclk                       (refclk_bufg),
650c735
<       .rx_mac_aclk                  (rx_mac_aclk),
---
>       .rx_mac_aclk                  (rx_axis_mac_aclk),
652,653c737,738
<       .rx_statistics_vector         (rx_statistics_vector),
<       .rx_statistics_valid          (rx_statistics_valid),
---
>       // .rx_statistics_vector         (rx_statistics_vector),
>       // .rx_statistics_valid          (rx_statistics_valid),
663a749,754
>       // rx mac AXI-Stream interface
>       .rx_axis_mac_tdata            (rx_axis_mac_tdata),
>       .rx_axis_mac_tvalid           (rx_axis_mac_tvalid),
>       .rx_axis_mac_tlast            (rx_axis_mac_tlast),
>       .rx_axis_mac_tuser            (rx_axis_mac_tuser),
> 
666c757
<       .tx_mac_aclk                  (tx_mac_aclk),
---
>       .tx_mac_aclk                  (tx_axis_mac_aclk),
668,670c759,761
<       .tx_ifg_delay                 (tx_ifg_delay),
<       .tx_statistics_vector         (tx_statistics_vector),
<       .tx_statistics_valid          (tx_statistics_valid),
---
>       // .tx_ifg_delay                 (tx_ifg_delay),
>       // .tx_statistics_vector         (tx_statistics_vector),
>       // .tx_statistics_valid          (tx_statistics_valid),
681c772,777
< 
---
>       // tx mac AXI-Stream interface
>       .tx_axis_mac_tdata              (tx_axis_mac_tdata),
>       .tx_axis_mac_tvalid             (tx_axis_mac_tvalid),
>       .tx_axis_mac_tlast              (tx_axis_mac_tlast),
>       .tx_axis_mac_tready             (tx_axis_mac_tready),
>       .tx_axis_mac_tuser              (tx_axis_mac_tuser)
685,686c781,782
<       .pause_req                    (pause_req),
<       .pause_val                    (pause_val),
---
>       // .pause_req                    (pause_req),
>       // .pause_val                    (pause_val),
688,698c784,797
<       // GMII Interface
<       //-----------------
<       .gmii_txd                     (gmii_txd),
<       .gmii_tx_en                   (gmii_tx_en),
<       .gmii_tx_er                   (gmii_tx_er),
<       .gmii_tx_clk                  (gmii_tx_clk),
<       .gmii_rxd                     (gmii_rxd),
<       .gmii_rx_dv                   (gmii_rx_dv),
<       .gmii_rx_er                   (gmii_rx_er),
<       .gmii_rx_clk                  (gmii_rx_clk),
<       .mii_tx_clk                   (mii_tx_clk),
---
>       // RGMII Interface
>       //------------------
>       // .rgmii_txd                    (rgmii_txd),
>       // .rgmii_tx_ctl                 (rgmii_tx_ctl),
>       // .rgmii_txc                    (rgmii_txc),
>       // .rgmii_rxd                    (rgmii_rxd),
>       // .rgmii_rx_ctl                 (rgmii_rx_ctl),
>       // .rgmii_rxc                    (rgmii_rxc),
> 
>       // RGMII Inband Status Registers
>       //--------------------------------
>       // .inband_link_status           (inband_link_status),
>       // .inband_clock_speed           (inband_clock_speed),
>       // .inband_duplex_status         (inband_duplex_status),
703,704c802,803
<       .mdio                         (mdio),
<       .mdc                          (mdc),
---
>       // .mdio                         (mdio),
>       // .mdc                          (mdc),
708,730c807,829
<       .s_axi_aclk                   (s_axi_aclk),
<       .s_axi_resetn                 (s_axi_resetn),
< 
<       .s_axi_awaddr                 (s_axi_awaddr),
<       .s_axi_awvalid                (s_axi_awvalid),
<       .s_axi_awready                (s_axi_awready),
< 
<       .s_axi_wdata                  (s_axi_wdata),
<       .s_axi_wvalid                 (s_axi_wvalid),
<       .s_axi_wready                 (s_axi_wready),
< 
<       .s_axi_bresp                  (s_axi_bresp),
<       .s_axi_bvalid                 (s_axi_bvalid),
<       .s_axi_bready                 (s_axi_bready),
< 
<       .s_axi_araddr                 (s_axi_araddr),
<       .s_axi_arvalid                (s_axi_arvalid),
<       .s_axi_arready                (s_axi_arready),
< 
<       .s_axi_rdata                  (s_axi_rdata),
<       .s_axi_rresp                  (s_axi_rresp),
<       .s_axi_rvalid                 (s_axi_rvalid),
<       .s_axi_rready                 (s_axi_rready)
---
>       // .s_axi_aclk                   (s_axi_aclk),
>       // .s_axi_resetn                 (s_axi_resetn),
>       //
>       // .s_axi_awaddr                 (s_axi_awaddr),
>       // .s_axi_awvalid                (s_axi_awvalid),
>       // .s_axi_awready                (s_axi_awready),
>       //
>       // .s_axi_wdata                  (s_axi_wdata),
>       // .s_axi_wvalid                 (s_axi_wvalid),
>       // .s_axi_wready                 (s_axi_wready),
>       //
>       // .s_axi_bresp                  (s_axi_bresp),
>       // .s_axi_bvalid                 (s_axi_bvalid),
>       // .s_axi_bready                 (s_axi_bready),
>       //
>       // .s_axi_araddr                 (s_axi_araddr),
>       // .s_axi_arvalid                (s_axi_arvalid),
>       // .s_axi_arready                (s_axi_arready),
>       //
>       // .s_axi_rdata                  (s_axi_rdata),
>       // .s_axi_rresp                  (s_axi_rresp),
>       // .s_axi_rvalid                 (s_axi_rvalid),
>       // .s_axi_rready                 (s_axi_rready)
746c845
<       .enable_address_swap          (enable_address_swap),
---
>       .enable_address_swap          (1'b0),
767d865
< 
